---
- name: Set environment variables for Cloudera credentials
  become_user: "{{ ansible_user }}"
  set_fact:
    env_vars:
      Cloudera_username: "{{ Cloudera_username }}"
      Cloudera_password: "{{ Cloudera_password }}"

- name: Log in to Cloudera registry using Helm
  become_user: "{{ ansible_user }}"
  shell: |
    echo "{{ Cloudera_password }}" | helm registry login container.repository.cloudera.com \
    --username "{{ Cloudera_username }}" \
    --password-stdin

- name: Check if Cloudera license file already exists
  stat:
    path: /tmp/cloudera_license.txt
  register: cloudera_license_stat
  changed_when: false
  failed_when: false

- name: Copy Cloudera license file to remote host if not already present
  become_user: "{{ ansible_user }}"
  copy:
    src: cloudera_license.txt
    dest: /tmp/cloudera_license.txt
    mode: '0600'
  when: cloudera_license_stat.stat.exists == false

- name: Check if CSA Operator is already installed via Helm
  become_user: "{{ ansible_user }}"
  shell: helm list -n csa-operator-system --filter ^csa-operator$ | grep csa-operator || true
  register: csa_operator_installed
  changed_when: false
  failed_when: false

- name: Install CSA Operator via Helm if not already installed
  become_user: "{{ ansible_user }}"
  shell: |
    helm install csa-operator --namespace csa-operator-system \
      --set 'flink-kubernetes-operator.imagePullSecrets[0].name=docker-pull-secret' \
      --set 'ssb.sse.image.imagePullSecrets[0].name=docker-pull-secret' \
      --set 'ssb.sqlRunner.image.imagePullSecrets[0].name=docker-pull-secret' \
      --set-file flink-kubernetes-operator.clouderaLicense.fileContent=/tmp/cloudera_license.txt \
      oci://container.repository.cloudera.com/cloudera-helm/csa-operator/csa-operator \
      --version {{ csa_operator_version }}
  when: csa_operator_installed.stdout == ""
  register: install_csa_operator_result
  changed_when: "'has been added' in install_csa_operator_result.stdout"

- name: Wait for all containers in pods to be Ready in csa-operator-system
  become_user: "{{ ansible_user }}"
  shell: |
    kubectl get pods -n csa-operator-system --no-headers | awk '{print $2}' | grep -vE '([0-9]+)/\1'
  register: not_ready
  until: not_ready.stdout == ""
  retries: 20
  delay: 15
  failed_when: false

- name: Deploy Flink session cluster
  become_user: "{{ ansible_user }}"
  shell: |
    kubectl apply -n csa-operator-system -f /tmp/flink-deployment.yaml
  register: flink_deploy
  changed_when: "'created' in flink_deploy.stdout or 'configured' in flink_deploy.stdout"
  failed_when: flink_deploy.rc != 0
